 Arrays in Java
 -------------------------------------------------------------------

 Arrays in java are object of java.lang.Object class.

 To declare an array (syntax)
 -----------------------------
   type []varName;
   type varName[];

    type[] var1,var2,var3; This syntax will create three arrays 			   because of type[] syntax.

     type var1[],var2,var3; This syntax creates single "var1" array
				and var2 & var3 as type variable.
 
   To add a dimension to an array,
         type[][] var1  or type var1[][]
         type[][][] var1 or type var1[][][]

 To create an array (syntax)
 ---------------------------
 Two methods to create arrays:
    1. Using new keyword
              new type[size];
    2. Array initializer
              type []var = { value1, value2, ..... };

    When you create an array, an additional "length" property will be
	also created along with array.

    We cannot change the array size once it is created. It means we   cannot insert or delete array element into/from the existing array.     
    Always use an array when count of elements are known at the time
    of compilation. Don't use array when you are not sure about
    the count of elements ( we will have to use Data-structure      classes - LinkedList, ArrayList, Set, Map etc).

 To iterate arrays (visit elements)
 -----------------------------------
 We can use simple for,while or do while:
    for(int i=0;i<array.length;i++) {
       System.out.println( array[i] );
     }
    Or
     i=0;
     while( i<array.length ) {
        //
        i++; 
     }
 We have another loop called "for in" or "for each" loop which is   especially used traverse the arrays & collections (Data structure     objects).

    Syntax:
           for(Type var : array-or-collection-object) {
               //
            }
 
Example:

 int  no[]; // "no" is a reference variable
 //create three integer variable
  no = new int[3]; // or no = int[]{22,3,24};
  System.out.println( no.length ); //3
  for(int i=0;i<no.length;i++) {
     System.out.println( no[i] );
   }
  //Read only loop - because each time value from an array will be
  //			copied to the local variable "int n"
  for(int n:no) {
     System.out.println(n);
  }

Example: Always use for in loop

String days[] = 
 {
   "Monday",
   "Tuesday",
   "Wednesday",
    ...
  };
 for( String day: days ) {
     System.out.println( day );
 }

Example: Array of objects - Program to create five student referenec variable and also create five student objects.

Assume that we've Student class.

code in main:

       Student []students = new Student[5]; //create five reference 					    //var

       for(Student student: students ) {
           System.out.println( student );   // prints null
       }

        //Now create "Student" objects
       students[0] = new Student(10,"A");
       students[4] = new Student();
       students[2] = new Student(20,"B");

       for(Student student: students ) {
          if(student!=null) {
             System.out.println( student.getRoll() );
          }
       }
   
java.util.Arrays - helper methods to search, sort, copy & fill array elements.
---------------------------------------------------------------------
        int []nos = {33,2,443,5,3,6};
        java.util.Arrays.sort( nos );
        for(int n:nos) {
            System.out.println(n);  
         } 
        java.util.Arrays.fill( nos , 100 );
        for(int n:nos) {
            System.out.println(n);  
         }

